<%= render :partial => "divide" %>

<%= render :partial => "distinct" %>

<%= render :partial => "nodes" %>

<script>
  let mildWarning = 0;
  let moderateWarning = 0;
  let severeWarning = 0;

if (gon.warning != undefined) {
  mildWarning = gon.warning.mild;
  moderateWarning = gon.warning.moderate;
  severeWarning = gon.warning.severe;
}

function delay_colorCheck(delay_time) {
  let check = Math.round((((delay_time)*1000)*100))/100;
  if(mildWarning != 0 || moderateWarning != 0 || severeWarning != 0) {
    if (check >= severeWarning) {
      return '#FF0040';
    }else if(check >= moderateWarning){
      return '#FF8000';
    }else if(check >= mildWarning){
      return '#FFBF00';
    }
  }
}
// スイッチ間のつながりを表示する
let edges = [];


for(i=0; i < gon.topologies.length; i++) {
  if (topology[i].dport2 != null) {
    if (topology[i].dport2.match(/-/)) {
      edges.push({
        from: topology[i].dport1.split("-")[0],
        to: topology[i].dport2.split("-")[0],
        label: `${topology[i].dport1} ${topology[i].dport2} \n ${Math.round((((topology[i].delay)*1000)*100))/100}ms`,
        color: delay_colorCheck(topology[i].delay),
        width: 3,
      });
    }else {
      edges.push({
        from: topology[i].dport1.split("-")[0],
        to: topology[i].dport2,
        label: `${topology[i].dport1}`,
        width: 3,
      });
    }
  }
}
// create a network
let container = document.getElementById('mynetwork');

// provide the data in the vis format
let data = {
  nodes: nodes,
  edges: edges
};
let options = {
  layout: {
    randomSeed: 1
  },
};

// initialize your network!
let network = new vis.Network(container, data, options);
</script>
