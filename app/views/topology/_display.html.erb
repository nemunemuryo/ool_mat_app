<script>
let topology = gon.topologies

// スイッチ情報だけ取り出す
var a = []
var b = []
for (var i=1; i<=topology.length; ++i) {
  a[a.length] = topology[i-1].dp_port1.split("-")[0];
  b[b.length] = topology[i-1].dp_port2.split("-")[0];
}

// 配列の結合
a = a.concat(b);

// 重複を取り除く
const distinctSwitch = a.reduce(
  (distinct, num) =>
    (distinct.indexOf(num) !== -1) ? distinct : [...distinct, num]
  , []
)
</script>

<script>

// スイッチのデータを生成する
function createSwitchDataSet(){
  let data = []
  for(i=1; i <= distinctSwitch.length; i++) {
    data[data.length] = {
      id: i,
      label: `Swicth \n0x${distinctSwitch[i-1]}`,
      shape: 'box'
    }
  }
  return data
}
// スイッチを表示する
var nodes = new vis.DataSet(createSwitchDataSet());

// ポート間のつながりのデータを生成する
function createPortDataSet(){
  let data = []
  for(i=1; i <= gon.topologies.length; ++i) {
    if (topology[i-1].dp_port2 == null) {
      // data[data.length] = {from: topology[i-1].dp_port1.split("-")[0] , to: topology[i-1].dp_port2.split("-")[0], label: `${topology[i-1].port1} ${topology[i-1].port2} , ${topology[i-1].delay}`}
    }else {
      data[data.length] = {
        from: topology[i-1].dp_port1.split("-")[0],
        to: topology[i-1].dp_port2.split("-")[0],
        label: `${topology[i-1].dp_port1} ${topology[i-1].dp_port2} \n ${topology[i-1].delay}ms`
      }
    }
  }
  return data
}

// スイッチ間のつながりを表示する
 var edges = new vis.DataSet(createPortDataSet());

// create a network
var container = document.getElementById('mynetwork');

// provide the data in the vis format
var data = {
    nodes: nodes,
    edges: edges
};
var options = {
  edges:{
    color: {
      color:'#FE2E2E'
    }
  },
  layout: {
    randomSeed: 1
  }
};

// initialize your network!
var network = new vis.Network(container, data, options);
</script>
