<%= render :partial => "divide" %>

<%= render :partial => "distinct" %>

<script>
// // スイッチを表示する
let nodes = [];
for(i=0; i < distinctSwitches.length; i++) {
  nodes.push({
    id: distinctSwitches[i],
    label: `Swicth \n0x${distinctSwitches[i]}`,
    shape: 'box'
  });
}

// ホストを表示する
for(i=0; i < hosts.length; i++) {
  nodes.push({
    id: hosts[i],
    label: `Host \n${hosts[i]}`,
    shape: 'circle'
  });
}

// スイッチ間のつながりを表示する
let edges = [];

for(i=0; i < gon.topologies.length; i++) {
  if (topology[i].dport2 != null) {
    if (topology[i].dport2.match(/-/)) {
      edges.push({
        from: topology[i].dport1.split("-")[0],
        to: topology[i].dport2.split("-")[0],
        label: `${topology[i].dport1} ${topology[i].dport2} \n ${topology[i].delay}ms`
      });
    }else {
      edges.push({
        from: topology[i].dport1.split("-")[0],
        to: topology[i].dport2,
        label: `${topology[i].dport1}`
      });
    }
  }
}
// create a network
let container = document.getElementById('mynetwork');

// provide the data in the vis format
let data = {
  nodes: nodes,
  edges: edges
};
let options = {
  edges:{
    color: {
      color:'#FE2E2E'
    }
  },
  layout: {
    randomSeed: 1
  }
};

// initialize your network!
let network = new vis.Network(container, data, options);
</script>
