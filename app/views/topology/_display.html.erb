<script>
let topology = gon.topologies

// スイッチ情報だけ取り出す
let a = []
for (var i=1; i<=topology.length; ++i) {
  a.push(topology[i-1].dp_port1.split("-")[0], topology[i-1].dp_port2.split("-")[0]);
}

// 重複を取り除く
const distinctSwitch = a.reduce(
  (distinct, num) =>
  (distinct.indexOf(num) !== -1) ? distinct : [...distinct, num]
  , []
)

// // スイッチを表示する
let nodes = [];
for(i=1; i <= distinctSwitch.length; i++) {
  nodes.push({
    id: i,
    label: `Swicth \n0x${distinctSwitch[i-1]}`,
    shape: 'box'
  });
}

// スイッチ間のつながりを表示する
let edges = [];

for(i=1; i <= gon.topologies.length; ++i) {
  if (topology[i-1].dp_port2 == null) {
    // data[data.length] = {from: topology[i-1].dp_port1.split("-")[0] , to: topology[i-1].dp_port2.split("-")[0], label: `${topology[i-1].port1} ${topology[i-1].port2} , ${topology[i-1].delay}`}
  }else {
    edges.push({
      from: topology[i-1].dp_port1.split("-")[0],
      to: topology[i-1].dp_port2.split("-")[0],
      label: `${topology[i-1].dp_port1} ${topology[i-1].dp_port2} \n ${topology[i-1].delay}ms`
    });
  }
}
// create a network
let container = document.getElementById('mynetwork');

// provide the data in the vis format
let data = {
  nodes: nodes,
  edges: edges
};
let options = {
  edges:{
    color: {
      color:'#FE2E2E'
    }
  },
  layout: {
    randomSeed: 1
  }
};

// initialize your network!
let network = new vis.Network(container, data, options);
</script>
