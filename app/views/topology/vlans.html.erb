<div id="mynetwork"></div>
<!-- <pre><id="eventSpan"></pre> -->

<%= render :partial => "divide" %>

<%= render :partial => "distinct" %>

<script>
let nodes = [];
for(i=0; i < distinctSwitches.length; i++) {
  nodes.push({
    id: distinctSwitches[i],
    label: `Swicth \n0x${distinctSwitches[i]}`,
    shape: 'box'
  });
}

// ホストを表示する
for(i=0; i < hosts.length; i++) {
  nodes.push({
    id: hosts[i],
    label: `Host \n${hosts[i]}`,
    shape: 'circle'
  });
}

// 繋がりを表示する
let edges = [];

let testString = gon.vlans.path
let hoge = testString.split("|")
let foo = [];
for (let i = 1; i<hoge.length-1; i++) {
  console.log(hoge[i].split(","))
  foo = foo.concat(hoge[i].split(","))
}
console.log(foo)

for(i=0; i < gon.topologies.length; i++) {
  if (topology[i].dport2 != null) {
    // スイッチ間の繋がりを表示
    if (topology[i].dport2.match(/-/)) {
      if (foo.indexOf(topology[i].dport2) >= 0) {// || foo[1][0] == topology[i].dp_port2 || foo[1][1] == topology[i].dp_port2 ) {
        edges.push({
          from: topology[i].dport1.split("-")[0],
          to: topology[i].dport2.split("-")[0],
          label: `${topology[i].dport1} ${topology[i].dport2} \n ${Math.round((((topology[i].delay)*1000)*100))/100}ms`,
          dashes: false
        });
      }else {
        edges.push({
          from: topology[i].dport1.split("-")[0],
          to: topology[i].dport2.split("-")[0],
          label: `${topology[i].dport1} ${topology[i].dport2} \n ${Math.round((((topology[i].delay)*1000)*100))/100}ms`,
        });
      }
    }else {
      // スイッチとホスト間の繋がりを表示
      if (hoge[0] == topology[i].dport1 || hoge[hoge.length-1] == topology[i].dport1) {
        edges.push({
          from: topology[i].dport1.split("-")[0],
          to: topology[i].dport2,
          label: `${topology[i].dport1}`,
          dashes: false
        });
      }else{
        edges.push({
          from: topology[i].dport1.split("-")[0],
          to: topology[i].dport2,
          label: `${topology[i].dport1}`
        });
      }
    }
  }
}

// create a network
let container = document.getElementById('mynetwork');

// provide the data in the vis format
let data = {
  nodes: nodes,
  edges: edges
};
let options = {
  edges:{
    color: {
      color:'#FE2E2E'
    },
    dashes: true,
  },
  layout: {
    randomSeed: 1
  }
};

// initialize your network!
var network = new vis.Network(container, data, options);
</script>
