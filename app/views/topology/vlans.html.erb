<div id="mynetwork"></div>
<pre><id="eventSpan"></pre>

<%= render :partial => "divide" %>

<%= render :partial => "distinct" %>

<script>
let nodes = [];
for(i=0; i < distinctSwitches.length; i++) {
  nodes.push({
    id: distinctSwitches[i],
    label: `Swicth \n0x${distinctSwitches[i]}`,
    shape: 'box'
  });
}

// ホストを表示する
for(i=0; i < hosts.length; i++) {
  nodes.push({
    id: hosts[i],
    label: `Host \n${hosts[i]}`,
    shape: 'circle'
  });
}

// 繋がりを表示する
let edges = [];

console.log(gon.vlans.path)
let testString = gon.vlans.path
let hoge = testString.split("|")
let foo = hoge[1].split(",");
let foo2 = hoge[2].split(",");
// for (let i=0; i<hoge.length; i++) {
//   if ( hoge[i].match(/,/) ) {
//     let foo = hoge[i].split(",");
//     edges.push({
//       from: foo[0][0],
//       to: foo[1][0],
//       dashes: false
//     })
//   }else {
//     for(let j=0; j<gon.topologies.length; j++) {
//       if(gon.topologies[j].dp_port1 == hoge[i]) {
//         edges.push({
//           from: hoge[i][0],
//           to: gon.topologies[j].dp_port2,
//           dashes: false
//         })
//       }
//     }
//   }
// }
for(i=0; i < gon.topologies.length; i++) {
  if (topology[i].dp_port2 != null) {
    // スイッチ間の繋がりを表示
    if (topology[i].dp_port2.match(/-/)) {
      if (foo[0] == topology[i].dp_port2 || foo[1] == topology[i].dp_port2 || foo2[0] == topology[i].dp_port2 || foo2[1] == topology[i].dp_port2 ) {
        edges.push({
          from: topology[i].dp_port1.split("-")[0],
          to: topology[i].dp_port2.split("-")[0],
          label: `${topology[i].dp_port1} ${topology[i].dp_port2} \n ${topology[i].delay}ms`,
          dashes: false
        });
      }else {
        edges.push({
          from: topology[i].dp_port1.split("-")[0],
          to: topology[i].dp_port2.split("-")[0],
          label: `${topology[i].dp_port1} ${topology[i].dp_port2} \n ${topology[i].delay}ms`,
        });
      }
    }else {
    // スイッチとホスト間の繋がりを表示
      if (hoge[0] == topology[i].dp_port1 || hoge[3] == topology[i].dp_port1) {
        edges.push({
          from: topology[i].dp_port1.split("-")[0],
          to: topology[i].dp_port2,
          label: `${topology[i].dp_port1}`,
          dashes: false
        });
      }else{
        edges.push({
          from: topology[i].dp_port1.split("-")[0],
          to: topology[i].dp_port2,
          label: `${topology[i].dp_port1}`
        });
      }
    }
  }
}

// create a network
let container = document.getElementById('mynetwork');

// provide the data in the vis format
let data = {
  nodes: nodes,
  edges: edges
};
let options = {
  edges:{
    color: {
      color:'#FE2E2E'
    },
    dashes: true,
  },
  layout: {
    randomSeed: 1
  }
};

// initialize your network!
var network = new vis.Network(container, data, options);
</script>
